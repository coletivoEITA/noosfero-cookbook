RailsRoot = "<%= @code_path %>"
PidsDir = "#{RailsRoot}/tmp/pids"
OldPidFile = "#{PidsDir}/unicorn.pid.oldbin"

ListenAddress = "127.0.0.1"
ListenPort = <%= @server[:port] %>
UnixListen = "run/unicorn.sock"
Backlog = <%= @server[:backlog] %>

Workers = <%= @server[:workers] %>
Timeout = <%= @server[:timeout] %>

WarmUp = true
WarmUpTime = <%= @server[:warmup_time] %>
# caution use non cacheable urls
WarmUpUrl = ['/admin/plugins', '/', '/profile/content']

CurrentPrio = Process.getpriority Process::PRIO_PROCESS, 0
# put "* - nice 0" on /etc/security/limits.conf to enable
WarmUpRenice = `bash -c 'ulimit -e'`.to_i-20 >= CurrentPrio rescue false
WarmUpRenicePrio = 19

begin
  require 'unicorn/worker_killer'
  WorkerKiller = true
rescue LoadError
  WorkerKiller = nil
end
WorkerKillByRequests = <%= @server[:restart_on_requests].first %>..<%= @server[:restart_on_requests].last %>
WorkerKillByMemory = <%= @server[:restart_on_memory].first %>..<%= @server[:restart_on_memory].last %>

# FIXME: this makes the worker too big and activate Unicorn::WorkerKiller::Oom
WorkerOutOfBandGcFrequency = nil

WorkerListen = true
WorkerPidFile = true


working_directory RailsRoot

worker_processes Workers
timeout Timeout

#stderr_path "#{RailsRoot}/log/unicorn.stderr.log"
#stdout_path "#{RailsRoot}/log/unicorn.stdout.log"
pid "#{PidsDir}/unicorn.pid"

listen "#{RailsRoot}/#{UnixListen}", :backlog => Backlog
listen "#{ListenAddress}:#{ListenPort}", :tcp_nopush => true

# combine Ruby 2 or REE with "preload_app true" for memory savings
# http://rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
preload_app true
GC.copy_on_write_friendly = true if GC.respond_to? :copy_on_write_friendly=

before_fork do |server, worker|
  # worker 0 is the first to init, so hold the master here
  if worker.nr == 0
    if WarmUp
      Process.setpriority Process::PRIO_PROCESS, 0, WarmUpRenicePrio if WarmUpRenice

      require 'rack/test'
      client = Rack::MockRequest.new server.app
      Array(WarmUpUrl).each do |url|
        client.get url
      end

      Process.setpriority Process::PRIO_PROCESS, 0, CurrentPrio if WarmUpRenice
    end

    Thread.new do
      # wait a little for the new master
      sleep 5

      # a .oldbin file exists if unicorn was gracefully restarted with a USR2 signal
      # we should terminate the old process now that we're up and running
      if File.exists? OldPidFile
        old_pid = File.read(OldPidFile).to_i
        begin
          Process.kill "QUIT", old_pid
          File.delete OldPidFile
        rescue Errno::ENOENT, Errno::ESRCH
          # someone else did our job for us
        end
      end
    end
  end

  # Disconnect since the database connection will not carry over
  ActiveRecord::Base.connection.disconnect! if defined? ActiveRecord::Base
end

after_fork do |server, worker|
  # Start up the database connection again in the worker
  ActiveRecord::Base.establish_connection if defined? ActiveRecord::Base

  # reset memcache connection (if using memcache-client)
  Rails.cache.instance_variable_get(:@data).reset if Rails.cache.class.to_s == 'ActiveSupport::Cache::MemCacheStore'

  if WorkerKiller
    Unicorn::WorkerKiller::MaxRequests.new nil, WorkerKillByRequests.begin, WorkerKillByRequests.end if WorkerKillByRequests
    Unicorn::WorkerKiller::Oom.new nil, WorkerKillByMemory.begin * (1024**2), WorkerKillByMemory.end * (1024**2) if WorkerKillByMemory
  end

  # say to the kernel to kill very big workers first than other processes
  # Not very secure
  #File.open("/proc/#{Process.pid}/oom_adj", "w"){ |f| f << '12' }

  if WorkerListen
    # per-process listener ports for debugging/admin/migrations
    server.listen "#{ListenAddress}:#{ListenPort + worker.nr}", :tries => -1, :delay => 5
  end
  if WorkerPidFile
    child_pid_file = server.config[:pid].sub '.pid', ".#{worker.nr}.pid"
    system "echo #{Process.pid} > #{child_pid_file}"
  end
end
